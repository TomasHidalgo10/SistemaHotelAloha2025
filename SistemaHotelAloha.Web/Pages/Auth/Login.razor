@using SistemaHotelAloha.AccesoDatos
@using SistemaHotelAloha.Web.Auth
@page "/auth/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager Nav
@inject SimpleAuthStateProvider Auth

@* Si tenés un servicio ADO inyectable, descomenta esta línea y registralo en Program.cs *@
@* @inject IUsuarioAdoRepository Usuarios *@

<div class="container py-4">
    <div class="card p-4">
        <h3 class="mb-3">Iniciar sesión</h3>

        @if (!string.IsNullOrWhiteSpace(_error))
        {
            <div class="alert alert-danger">@_error</div>
        }

        <EditForm Model="_vm" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Email o usuario</label>
                <InputText class="form-control" @bind-Value="_vm.UsernameOrEmail" />
                <ValidationMessage For="@(() => _vm.UsernameOrEmail)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Contraseña</label>
                <InputText type="password" class="form-control" @bind-Value="_vm.Password" />
                <ValidationMessage For="@(() => _vm.Password)" />
            </div>

            <button class="btn btn-primary w-100" disabled="@_busy">
                @(_busy ? "Ingresando..." : "Entrar")
            </button>
        </EditForm>

        <div class="text-center mt-3">
            <NavLink href="/auth/register">¿No tenés cuenta? Registrate</NavLink>
        </div>
    </div>
</div>

@code {
    private readonly LoginVM _vm = new();
    private bool _busy;
    private string? _error;

    private async Task OnSubmit()
    {
        _error = null;
        _busy = true;
        try
        {
            // -----------------------------
            // 1) Validar credenciales (ADO.NET)
            // -----------------------------

            // Variante A: servicio inyectado (recomendada)
            // var user = await Usuarios.ValidateCredentialsAsync(_vm.UsernameOrEmail, _vm.Password);
            // if (user is null) { _error = "Usuario o contraseña inválidos."; return; }
            // var displayName = string.IsNullOrWhiteSpace(user.Nombre) ? user.Email : user.Nombre;

            // Variante B: clase estática ADO que ya uses (ajustá a tus firmas)
            // Ejemplo:
            // var user = AdoUsuarios.Login(_vm.UsernameOrEmail, _vm.Password); // devuelve null si falla
            // if (user == null) { _error = "Usuario o contraseña inválidos."; return; }
            // var displayName = string.IsNullOrWhiteSpace(user.Nombre) ? user.Email : user.Nombre;

            // Si todavía no conectaste el backend, uso el username como nombre para que veas el flujo:
            var displayName = _vm.UsernameOrEmail; // <-- Reemplazá por el valor real de tu consulta

            // -----------------------------
            // 2) Guardar sesión (ProtectedSessionStorage) vía provider
            // -----------------------------
            await Auth.SignInAsync(displayName);

            // -----------------------------
            // 3) Redirigir
            // -----------------------------
            Nav.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            _error = "No se pudo iniciar sesión. " + ex.Message;
        }
        finally
        {
            _busy = false;
            StateHasChanged();
        }
    }

    public class LoginVM
    {
        [Required(ErrorMessage = "Ingresá tu email o usuario")]
        public string UsernameOrEmail { get; set; } = string.Empty;

        [Required(ErrorMessage = "Ingresá la contraseña")]
        public string Password { get; set; } = string.Empty;
    }
}