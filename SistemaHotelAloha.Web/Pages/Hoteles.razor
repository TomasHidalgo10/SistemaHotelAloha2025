@page "/hoteles"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager Nav

<h3>Buscar hoteles</h3>

<input @bind="Q" placeholder="Ciudad o nombre" />
<button type="button" @onclick="Buscar">Buscar</button>

@if (loading)
{
    <p>Cargando...</p>
}
else if (result is null)
{

    <p>Sin resultados.</p>
}
else
{
    <ul>
        @foreach (var h in result)
        {
            <li>
                <img src="@GetImg(h)" alt="@h.Nombre" style="max-width:180px" />
                <div>@h.Nombre</div>
            </li>
        }
    </ul>
}

@code {
    // -------------- Estado de la p√°gina --------------
    [SupplyParameterFromQuery(Name = "q")]
    public string? Q { get; set; }

    bool loading;
    List<Hotel>? result;

    // -------------- Ciclo de vida seguro --------------
    protected override async Task OnParametersSetAsync()
    {
        // Se ejecuta al entrar y cuando cambie ?q= de la URL
        await DoSearch(Q);
    }

    private void Buscar()
    {
        // Cambia la URL
        var qs = string.IsNullOrWhiteSpace(Q) ? "" : $"?q={Uri.EscapeDataString(Q)}";
        Nav.NavigateTo($"/hoteles{qs}");
    }

    private async Task DoSearch(string? q)
    {
        loading = true;
        result = null;
        StateHasChanged(); // pinta "Cargando..."

        try
        {
            // Simula tu llamada real 
            await Task.Delay(200); 
            result = await BuscarEnServicio(q); 
        }
        finally
        {
            loading = false;
        }
    }

    // ----------------- Helpers -----------------
    private Task<List<Hotel>> BuscarEnServicio(string? q)
    {
        q = q?.Trim().ToLowerInvariant();
        var data = MockData();
        var fil = string.IsNullOrWhiteSpace(q) ? data : data.Where(h => h.Nombre.ToLower().Contains(q)).ToList();
        return Task.FromResult(fil);
    }

    private string GetImg(Hotel h)
    {
        // 1) ruta relativa guardada en BD 
        if (!string.IsNullOrWhiteSpace(h.FotoPath)) return "/" + h.FotoPath;

        // 2) bytes:
        if (h.FotoBytes is not null) return $"data:image/jpeg;base64,{Convert.ToBase64String(h.FotoBytes)}";

        // 3) Fallback:
        return "/images/placeholder.jpg";
    }

    // ----------------- Modelo demo -----------------
    private static List<Hotel> MockData() => new()
    {
        new Hotel { Nombre = "Aloha Centro", FotoPath = "images/h1.jpg" },
        new Hotel { Nombre = "Aloha Playa", FotoPath = "images/h2.jpg" },
    };

    public class Hotel
    {
        public string Nombre { get; set; } = "";
        public string? FotoPath { get; set; }
        public byte[]? FotoBytes { get; set; }
    }
}